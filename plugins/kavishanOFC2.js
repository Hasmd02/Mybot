const fs = require('fs');
const path = require('path');
const os = require('os');
const { copy } = require('fs-extra');

const axios = require('axios');
const FormData = require('form-data');
const moment = require('moment-timezone');

const config = require('../config');
const { cmd, commands } = require('../command');
const { 
  getBuffer, 
  getGroupAdmins, 
  getRandom, 
  h2k, 
  isUrl, 
  Json, 
  runtime, 
  sleep, 
  fetchJson 
} = require('../lib/functions');

// Function definitions below
function genMsgId() {
  const prefix = "3EB";
  const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  let randomText = prefix;

  for (let i = prefix.length; i < 22; i++) {
    const randomIndex = Math.floor(Math.random() * characters.length);
    randomText += characters.charAt(randomIndex);
  }

  return randomText;
}
var tesadtag = "*‡∂∏‡∂ß ‡∂ß‡∑ê‡∂ú‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß text ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±!*"
var descg = "‡∂ë‡∂∫ ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ö ‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∑í‡∂±‡∑ä ‡∂ß‡∑ê‡∂ú‡∑ä ‡∂ö‡∂ª‡∂∫‡∑í."
var ONLGROUP = "*‡∂∏‡∑ô‡∂∫ ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∂ö‡∑ä ‡∂±‡∑ú‡∑Ä‡∑ö‡∑ä!*"
var ADMIN = "‡∂î‡∂∂ ‡∂¥‡∂ª‡∑í‡∂¥‡∑è‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑ä ‡∂±‡∑ú‡∑Ä‡∑ö!"
var tmsg = "‡∂ë‡∂∫ ‡∂∂‡∑ú‡∂ß‡∑ä ‡∑É‡∂∂‡∑ê‡∂≥‡∑í‡∂∫ ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂∫‡∑í"
var imgmsg = "Enter the enable/disable value, For Example ${prefix}ephemeral enable"
var BOTOW = "*‡∂î‡∂∂ ‡∂∂‡∑ú‡∂ß‡∑ä‡∂ú‡∑ö ‡∑Ñ‡∑í‡∂∏‡∑í‡∂ö‡∂ª‡∑î ‡∑Ñ‡∑ù ‡∂ã‡∂¥‡∂¥‡∂ª‡∑í‡∂¥‡∑è‡∂Ω‡∂ö ‡∂ö‡∂ª‡∑î ‡∂±‡∑ú‡∑Ä‡∑ö!*"
var SUCCESS = "‚úÖ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏ ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª‡∂∫ ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑í."
var ERROR = "‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í‡∑Ä‡∑í‡∂∫!"

cmd({
    pattern: "savecontact",
    react: "üîñ",
    desc: "‡∂ë‡∂∫ ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞‡∂≠‡∑è ‡∑É‡∑î‡∂ª‡∑ê‡∂ö‡∑ì‡∂∏ ‡∑É‡∑í‡∂Ø‡∑î ‡∂ö‡∂ª‡∂∫‡∑í",
    category: "group",
    use: '.savecontact',
    filename: __filename
},
async (conn, mek, m, { from, isGroup, isAdmins, reply, participants, groupMetadata }) => {
    try {
        if (!isGroup) return reply('This command can only be used in groups.');
        if (!isAdmins) return reply('Only group admins can use this command.');

        let groupInfo = await conn.groupMetadata(from);
        let contacts = '';
        let noPort = 1;

        // Build the vCard contacts list
        for (let member of participants) {
            let number = member.id.split("@")[0];
            contacts += `BEGIN:VCARD\nVERSION:3.0\nFN:[${noPort++}] +${number}\nTEL;type=CELL;type=VOICE;waid=${number}:+${number}\nEND:VCARD\n`;
        }

        let fileName = './contacts.vcf';
        const fs = require('fs');
        fs.writeFileSync(fileName, contacts.trim());

        reply(`\nPlease wait... Saving ${participants.length} contacts.`);

        // Send the vCard file to the group
        await conn.sendMessage(m.chat, {
            document: fs.readFileSync(fileName),
            mimetype: 'text/vcard',
            fileName: 'Contact.vcf',
            caption: `\n‚úÖ Success!\nGroup: *${groupInfo.subject}*\nContacts: *${participants.length}*`
        }, { quoted: m });

        // Clean up the file after sending
        fs.unlinkSync(fileName);

        // React to the message
        await conn.sendMessage(from, { react: { text: `‚úÖ`, key: mek.key } });
    } catch (error) {
        console.error(error);
        reply('*Error!!*');
    }
});




        
	

//=========================================================================================

cmd({
    pattern: "kick",
    react: "ü•è",
    alias: ["remove"],
    desc: "‡∂ë‡∂∫ ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ô‡∂±‡∑ä ‡∑É‡∑Ñ‡∂∑‡∑è‡∂ú‡∑í‡∑Ä‡∂±‡∑ä‡∂±‡∑ô‡∂ö‡∑î ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª‡∂∫‡∑í",
    category: "group",
    use: '.kick',
    filename: __filename
},
async(conn, mek, m,{from, l, quoted, body, isCmd, command, mentionByTag , args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isCreator ,isKavishan, isAdmins, reply}) => {
try{
        if (!isGroup) return reply('‡∂∏‡∑ô‡∂∫ ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫‡∂ö‡∑í')
		if(!isAdmins) { if ( !isMe) return conn.sendMessage(from,{text:"üö´ *‡∂∏‡∑ô‡∂∫ ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä ‡∑Ä‡∑í‡∂Ø‡∑è‡∂±‡∂∫‡∂ö‡∑í*"},{quoted:mek }) }
		if(!isBotAdmins) return reply("‚ùå *‡∂¥‡∂Ω‡∂∏‡∑î‡∑Ä ‡∂î‡∂∂ ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä  ‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫*  ‚ùó")
		const mention = await mentionByTag
		let users = await (mention) || mek.msg.contextInfo.participant
		if (!users) return reply("üö´ *context ‡∂≠‡∑î‡∂Ω ‡∂ö‡∑í‡∑É‡∑í‡∂Ø‡∑î ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑î ‡∑É‡∑ú‡∂∫‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫*")
			await conn.groupParticipantsUpdate(from, [users], "remove")
			await conn.sendMessage(from,{text:`*Successfully removed*  ‚úîÔ∏è`},{quoted:mek })
	
} catch (e) {
reply('üö´ *Error Accurated !!*\n\n' + e )
console.log(e)
}
})

cmd({
    pattern: "promote",
    react: "ü™¢",
    alias: ["addadmin"],
    desc: "‡∂¥‡∂ª‡∑í‡∂¥‡∑è‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑î ‡∂Ω‡∑ô‡∑É ‡∑É‡∑Ñ‡∂∑‡∑è‡∂ú‡∑í‡∑Ä‡∂±‡∑ä‡∂±‡∑ô‡∂ö‡∑î ‡∂ë‡∂ö‡∑ä ‡∂ö‡∂ª‡∂∫‡∑í",
    category: "group",
    use: '.promote',
    filename: __filename
},
async(conn, mek, m,{from, l, quoted, body, isCmd, command, mentionByTag , args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isCreator ,isKavishan, isAdmins, reply}) => {
try{
        if (!isGroup) return reply('‡∂∏‡∑ô‡∂∫ ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫‡∂ö‡∑í')
		if(!isAdmins) { if (!isMe) return conn.sendMessage(from,{text:"üö´ *‡∂∏‡∑ô‡∂∫ ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä ‡∑Ä‡∑í‡∂Ø‡∑è‡∂±‡∂∫‡∂ö‡∑í*"},{quoted:mek }) }
		if(!isBotAdmins) return reply("‚ùì *‡∂¥‡∂Ω‡∂∏‡∑î‡∑Ä ‡∂∂‡∑ú‡∂ß‡∑ä ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä ‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫*")
		const mention= await mentionByTag
		let users = await (mention) || mek.msg.contextInfo.participant
		if (!users) return reply("üö´ *context ‡∂≠‡∑î‡∂Ω ‡∂ö‡∑í‡∑É‡∑í‡∂Ø‡∑î ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑î ‡∑É‡∑ú‡∂∫‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫*")
		const groupAdmins = await getGroupAdmins(participants) 
		if  ( groupAdmins.includes(users)) return reply('‚ùó *User Already an Admin*  ‚úîÔ∏è')
		    await conn.groupParticipantsUpdate(from, [users], "promote")
			await conn.sendMessage(from,{text:`*User promoted as an Admin*  ‚úîÔ∏è`},{quoted:mek })
	
} catch (e) {
reply('üö´ *Error Accurated !!*\n\n' + e )
console.log(e)
}
})


cmd({
    pattern: "demote",
    react: "ü™¢",
    alias: ["removeadmin"],
    desc: "‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä‡∑Ä ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∑ô‡∂ö‡∑î ‡∂Ω‡∑ô‡∑É ‡∂¥‡∑Ñ‡∂≠ ‡∑Ñ‡∑ô‡∂Ω‡∂∫‡∑í",
    category: "group",
    use: '.demote',
    filename: __filename
},
async(conn, mek, m,{from, l, quoted, body, isCmd, command, mentionByTag , args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isCreator ,isKavishan, isAdmins, reply}) => {
try{
        if (!isGroup) return reply('‡∂∏‡∑ô‡∂∫ ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫‡∂ö‡∑í')
		if(!isAdmins) { if ( !isMe) return conn.sendMessage(from,{text:"üö´ *This is admin only command*"},{quoted:mek }) }
		if(!isBotAdmins) return reply("‚ùå  *‡∂¥‡∂Ω‡∂∏‡∑î‡∑Ä ‡∂∂‡∑ú‡∂ß‡∑ä ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä ‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫*  ‚ùó")
		const mention= await mentionByTag
		let users = await (mention) || mek.msg.contextInfo.participant
		if (!users) return reply("üö´ *context ‡∂≠‡∑î‡∂Ω ‡∂ö‡∑í‡∑É‡∑í‡∂Ø‡∑î ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑î ‡∑É‡∑ú‡∂∫‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫*")
		const groupAdmins = await getGroupAdmins(participants) 
		if  ( !groupAdmins.includes(users)) return reply('‚ùó *User Already not an Admin*')
		    await conn.groupParticipantsUpdate(from, [users], "demote")
			await conn.sendMessage(from,{text:`*User No longer an Admin*  ‚úîÔ∏è`},{quoted:mek })
	
} catch (e) {
reply('üö´ *Error Accurated !!*\n\n' + e )
console.log(e)
}
})

cmd({
    pattern: "mute",
    react: "üîá",
    alias: ["close","mute_cyber"],
    desc: "‡∂ë‡∂∫ ‡∂¥‡∂ª‡∑í‡∂¥‡∑è‡∂Ω‡∂ö‡∂∫‡∂±‡∑ä ‡∑É‡∂Ø‡∑Ñ‡∑è ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂¥‡∂±‡∑í‡∑Ä‡∑í‡∂© ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂ö‡∂Ω‡∑É‡∂∫‡∑í.",
    category: "group",
    use: '.mute',
    filename: __filename
},
async(conn, mek, m,{from, l, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isCreator ,isKavishan, isAdmins, reply}) => {
try{
if (!isGroup) return reply('üö´ *‡∂∏‡∑ô‡∂∫ ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫‡∂ö‡∑í*')
if (!isBotAdmins) return reply('üö´ *‡∂¥‡∂Ω‡∂∏‡∑î‡∑Ä ‡∂∂‡∑ú‡∂ß‡∑ä ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä ‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫‡∑í*')
if (!isAdmins) { if (!isMe) return reply('üö´ *‡∂¥‡∂Ω‡∂∏‡∑î‡∑Ä ‡∂î‡∂∂ ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä  ‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫*') }
await conn.groupSettingUpdate(from, 'announcement')
 await conn.sendMessage(from , { text: `üîá *Group Chat closed by Admin ${pushname}*` }, { quoted: mek } )
} catch (e) {
reply('*Error !!*')
console.log(e)
}
})

cmd({
    pattern: "unmute",
    react: "üîà",
    alias: ["open","unmute_cyber"],
    desc: "‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∂±‡∑ä‡∂ß ‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂∫ ‡∑Ä‡∑ô‡∂≠ ‡∂¥‡∂±‡∑í‡∑Ä‡∑í‡∂© ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∑É‡∂Ω‡∑É‡∂∫‡∑í.",
    category: "group",
    use: '.unmute',
    filename: __filename
},
async(conn, mek, m,{from, l, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isCreator ,isKavishan, isAdmins, reply}) => {
try{
if (!isGroup) return reply('üö´ *‡∂∏‡∑ô‡∂∫ ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫‡∂ö‡∑í*')
if (!isBotAdmins) return reply('üö´ *‡∂¥‡∂Ω‡∂∏‡∑î‡∑Ä ‡∂∂‡∑ú‡∂ß‡∑ä ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä ‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫‡∑í*')
if (!isAdmins) { if (!isMe) return reply('üö´ *‡∂¥‡∂Ω‡∂∏‡∑î‡∑Ä ‡∂î‡∂∂ ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä  ‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫*') }
await conn.groupSettingUpdate(from, 'not_announcement')
 await conn.sendMessage(from , { text: `üîá *Group Chat Opened by Admin ${pushname}*` }, { quoted: mek } )
} catch (e) {
reply('*Error !!*')
console.log(e)
}
})
cmd({
    pattern: "leave",
    react: "üöÆ",
    alias: ["left","kickme"],
    desc: "‡∂ë‡∂∫ ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ô‡∂±‡∑ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∑Ä‡∑ì‡∂∏ ‡∑É‡∑í‡∂Ø‡∑î ‡∑Ä‡∑ô‡∂∫‡∑í",
    category: "group",
    use: '.leave',
    filename: __filename
},
async(conn, mek, m,{from, l, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isCreator ,isKavishan, isAdmins, reply}) => {
try{
if (!isGroup) {return reply('üö´ *‡∂∏‡∑ô‡∂∫ ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫‡∂ö‡∑í*')}
if (!isMe) {return reply('üö´ *‡∂∏‡∑ô‡∂∫ ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫‡∂ö‡∑í*')}
 await conn.sendMessage(from , { text: `üöÆ *Good Bye All*` }, { quoted: mek } )
 await conn.groupLeave(from) 
} catch (e) {
reply('*Error !!*')
console.log(e)
}
})
cmd({
    pattern: "invite",
    react: "üóø",
    alias: ["grouplink","glink"],
    desc: "‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä ‡∂Ü‡∂ª‡∑è‡∂∞‡∂±‡∑è ‡∑É‡∂∂‡∑ê‡∂≥‡∑í‡∂∫ ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂∫‡∑í",
    category: "group",
    use: '.invite',
    filename: __filename
},
async(conn, mek, m,{from, l, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isCreator ,isKavishan, isAdmins, reply}) => {
try{
if (!isGroup) return reply('üö´ *‡∂∏‡∑ô‡∂∫ ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫‡∂ö‡∑í*')
if (!isBotAdmins) return reply('üö´ *‡∂¥‡∂Ω‡∂∏‡∑î‡∑Ä ‡∂∂‡∑ú‡∂ß‡∑ä ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä ‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫‡∑í*')
if (!isAdmins) { if (!isMe) return reply('üö´ *‡∂¥‡∂Ω‡∂∏‡∑î‡∑Ä ‡∂î‡∂∂ ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä  ‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫*') }
const code = await conn.groupInviteCode(from)
//console.log("group code: " + code)
 await conn.sendMessage(from , { text: `üñáÔ∏è *Group Link*\n\nhttps://chat.whatsapp.com/${code}`}, { quoted: mek } )
} catch (e) {
reply('*Error !!*')
console.log(e)
}
})

//await sock.groupRevokeInvite("abcd-xyz@g.us")
cmd({
    pattern: "ginfo",
    react: "üïµÔ∏è",
    alias: ["groupinfo"],
    desc: "‡∂ë‡∂∫ ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂∫‡∑í.",
    category: "group",
    use: '.ginfo',
    filename: __filename
},
async(conn, mek, m,{from, l, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isCreator ,isKavishan, isAdmins, reply}) => {
    try {
        // Check if the command is being used in a group
        if (!isGroup) {
            return reply('üö´ *‡∂∏‡∑ô‡∂∫ ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫‡∂ö‡∑í*');
        }

        // Check if the bot is an admin
        if (!isBotAdmins) {
            return reply('üö´ *‡∂¥‡∂Ω‡∂∏‡∑î‡∑Ä ‡∂∂‡∑ú‡∂ß‡∑ä ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä ‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫‡∑í*');
        }

        // Check if the user is an admin or the creator
        if (!isAdmins && !isMe) {
            return reply('üö´ *‡∂¥‡∂Ω‡∂∏‡∑î‡∑Ä ‡∂î‡∂∂ ‡∂á‡∂©‡∑ä‡∂∏‡∑í‡∂±‡∑ä  ‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫*');
        }

        // Retrieve group metadata
        const metadata = await conn.groupMetadata(from);
        let ppUrl;

        // Try to get the group profile picture
        try {
            ppUrl = await conn.profilePictureUrl(from, 'image');
        } catch (e) {
            ppUrl = 'https://www.gstatic.com/webp/gallery/1.jpg'; // Default image if there's an error
        }

        // Prepare the group information data
        const gdata = `\n*${metadata.subject}*

üêâ *Group Jid* - ${metadata.id}

üì¨ *Participant Count* - ${metadata.size}

üë§ *Group Creator* - ${metadata.owner}

üìÉ *Group Description* - ${metadata.desc || 'No description provided'}

`;

        // Send the group information with the profile picture
        await conn.sendMessage(from, {
            image: { url: ppUrl },
            caption: gdata
        }, { quoted: mek });

    } catch (e) {
        // Error handling
        reply('‚õî *Error occurred!!*\n\n' + e);
        console.log(e);
    }
});


cmd({
    pattern: "add",
    desc: "‡∂ë‡∂∫ ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∂ß ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∑ô‡∂ö‡∑î ‡∂ë‡∂ö‡∑ä ‡∂ö‡∂ª‡∂∫‡∑í.",
    category: "group",
    react: "‚ûï",
    use:'.add',
    filename: __filename
},
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
    try {
        if (!isGroup) return reply('‡∂∏‡∑ô‡∂∏ ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫ ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö‡∑ä‡∂ö‡∑ö ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∂ö‡∑ä ‡∂≠‡∑î‡∑Ö ‡∂¥‡∂∏‡∂´.')
        if (!isBotAdmins) return reply('‡∂∏‡∑ô‡∂∏ ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫ ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂∂‡∑ú‡∂ß‡∑ä ‡∂¥‡∂ª‡∑í‡∂¥‡∑è‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑î ‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫.')
        if (!isAdmins) return reply('‡∂∏‡∑ô‡∂∏ ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫ ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂î‡∂∂ ‡∂¥‡∂ª‡∑í‡∂¥‡∑è‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑î ‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫.')
        const user = q.split(' ')[0]
        if (!user) return reply('‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ø‡∑î‡∂ª‡∂ö‡∂Æ‡∂± ‡∂Ö‡∂Ç‡∂ö‡∂∫‡∂ö‡∑ä ‡∑É‡∂¥‡∂∫‡∂±‡∑ä‡∂±.')

        await conn.groupParticipantsUpdate(from, [`${user}@s.whatsapp.net`], 'add')
        await reply(`@${user} has been added to the group.`, { mentions: [`${user}@s.whatsapp.net`] })
    } catch (e) {
        console.log(e)
        reply(`${e}`)
    }
})
cmd({
    pattern: "join",
    desc: "‡∂ë‡∂∫ ‡∂Ω‡∑í‡∂±‡∑ä‡∂ö‡∑ä ‡∂ë‡∂ö‡∂ö‡∑í‡∂±‡∑ä ‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂∫‡∂ß ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∂ª‡∂∫‡∑í",
    category: "main",
    use: '<group link.>',
},
async(conn, mek, m,{from, l, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner,isKavishan, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply}) => {
if(!isOwner && !isMe)return;
try{  if (!q) return reply(`Please give me Query`);
    if (!q.split(" ")[0] && !q.split(" ")[0].includes("whatsapp.com"))
       reply("Link Invalid, Please Send a valid whatsapp Group Link!");
    let result = q.split(" ")[0].split("https://chat.whatsapp.com/")[1];
    await conn.groupAcceptInvite(result)
        .then((res) => reply("‚úîÔ∏èJoined Group"))
        .catch((err) => reply("Error in Joining Group"));
} catch (e) {
    reply("üö© Not Found !")
    console.log(e)

}
})

cmd({
    pattern: "getpic",
    desc: "‡∂ë‡∂∫ ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä profile ‡∂¥‡∑í‡∂±‡∑ä‡∂≠‡∑ñ‡∂ª‡∂∫ ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂∫‡∑í.",
    category: "group",
    react: "üñºÔ∏è",
    use: '.getpic',
    filename: __filename
},
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
    try {
        if (!isGroup) return reply('‡∂∏‡∑ô‡∂∏ ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫ ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö‡∑ä‡∂ö‡∑ö ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∂ö‡∑ä ‡∂≠‡∑î‡∑Ö ‡∂¥‡∂∏‡∂´‡∑í.')

        const groupPic = await conn.profilePictureUrl(from, 'image').catch(e => null) // Catch any error and return null
        if (!groupPic) return reply('‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä profile ‡∂¥‡∑í‡∂±‡∑ä‡∂≠‡∑ñ‡∂ª‡∂∫ ‡∑É‡∑ú‡∂∫‡∑è‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö.')

        await conn.sendMessage(from, { image: { url: groupPic }, caption: 'Group Profile Picture' })
    } catch (e) {
        console.log(e)
        reply(`‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î ‡∑Ä‡∑í‡∂∫: ${e}`)
    }
})

cmd({
  pattern: "tourl",
  alias: ["imgtourl", "img2url", "url"],
  react: "üñá",
  desc: "‡∂ë‡∂∫ ‡∂¥‡∑í‡∂±‡∑ä‡∂≠‡∑ñ‡∂ª‡∂∫‡∂ö‡∑ä url ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∂‡∑Ä‡∂ß ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∂ª‡∂∫‡∑í",
  category: "convert",
  use: ".tourl",
  filename: __filename,
}, async (bot, message, args, options) => {
  const { from, quoted, reply, sender } = options;

  try {
    // Check if the message contains an image
    const targetMessage = message.quoted ? message.quoted : message;
    const mimetype = (targetMessage.msg || targetMessage).mimetype || "";
    if (!mimetype || !mimetype.startsWith("image")) {
      throw "Please reply to an image.";
    }

    // Download the image
    const imageBuffer = await targetMessage.download();
    const tempFilePath = path.join(os.tmpdir(), "temp_image");

    // Save the image temporarily
    fs.writeFileSync(tempFilePath, imageBuffer);

    // Prepare the image for upload
    const formData = new FormData();
    formData.append("image", fs.createReadStream(tempFilePath));

    // Upload the image to imgbb
    const response = await axios.post(
      "https://api.imgbb.com/1/upload?key=a4886aba4b2ec74eb880750a7ba52744",
      formData,
      { headers: { ...formData.getHeaders() } }
    );

    // Check the response
    if (!response.data || !response.data.data || !response.data.data.url) {
      throw "‚ùå Failed to upload the file.";
    }

    const uploadedUrl = response.data.data.url;

    // Clean up the temporary file
    fs.unlinkSync(tempFilePath);

    // Send the result
    await bot.sendMessage(from, {
      text: `*Image Uploaded Successfully*\nSize: ${imageBuffer.length} Byte(s)\n*URL:* ${uploadedUrl}\n\n> Uploaded kavishanOFC`,
      contextInfo: {
        mentionedJid: [sender],
        forwardingScore: 1000,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
          newsletterJid: "120363376339574797@newsletter",
          newsletterName: "Ôº§Ôº°Ôº≤Ôº´Ôº≠Ôº°Ôº¥Ôº¥Ôº• Ôº∏",
          serverMessageId: 143,
        },
      },
    });
  } catch (error) {
    reply("Error: " + error);
    console.error(error);
  }
});
		
